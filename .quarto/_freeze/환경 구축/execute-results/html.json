{
  "hash": "52f9a7a7395b076c11ebdd05e3723725",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Chapter3. 환경 구축\nengine: knitr\n---\n\n\n\n\n\n\n## 1. Linux 환경 설정 {.unnumbered}\n\n**💡 Environment Modules**\n\n    Environment Modules는 사용자로 하여금 \n    Unix/Linux 환경 설정을 쉽게 수정할 수 있도록 돕는 모듈입니다. \n    Environment Modules를 활용하면 환경변수(PATH 등)을 \n    일일히 다시 지정해 줄 필요가 없습니다. \n\n    공식 홈페이지(https://modules.sourceforge.net/)에서 다운로드 할 수 있습니다. \n\n### 1.1 Module avail {.unnumbered}\n\nUBIA Cluster 내에서 사용 가능한 모든 모듈을 확인할 수 있는 명령어입니다.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(ubai) [ssu@gate1 ~]$ module avail\n\n---------------------- /opt/ohpc/pub/modulefiles ----------------------\n   CUDA/11.2.2             cmake/3.24.2                  cuda/11.2.2        \n   EasyBuild/4.9.1         compiler-rt/latest            cuda/11.3.1       \n   R/4.3.1                 compiler-rt/2023.1.0   (D)    cuda/11.4.4        \n   advisor/latest          compiler-rt32/latest          cuda/11.5.2        \n   advisor/2023.1.0 (D)    compiler-rt32/2023.1.0 (D)    cuda/11.6.2       \n   autotools               compiler/latest               cuda/11.7.1       \n   ccl/latest              compiler/2023.1.0      (D)    cuda/11.8.0       \n   ccl/2021.9.0     (D)    compiler32/latest             cuda/12.0.0       \n   clck/latest             compiler32/2023.1.0    (D)    cuda/12.1.1       \n   clck/2021.7.3    (D)    cuda/leejihun_cuda            cuda/12.2.1 (D)   \n\n  Where:\n   D:  Default Module\n\nIf the avail list is too long consider trying:\n\n\"module --default avail\" or \"ml -d av\" to just list the default modules.\n\"module overview\" or \"ml ov\" to display the number of modules for each name.\n\nUse \"module spider\" to find all possible modules and extensions.\nUse \"module keyword key1 key2 ...\" to search for all possible modules matching any of the \"keys\".\n```\n:::\n\n\n\n\n\n\n\n### 1.2 Module show {.unnumbered}\n\n사용하고자 하는 모듈의 세부 정보를 확인할 수 있는 명령어입니다.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(ubai) [ssu@gate1 ~]$ module show cuda/11.2.2\n------------------------------------------------\n   /opt/ohpc/pub/modulefiles/cuda/11.2.2:\n------------------------------------------------\nwhatis(\"Name: CUDA Collection\")\nwhatis(\"Version: 11.2.2\")\nwhatis(\"Category: cuda\")\nprepend_path(\"PATH\",\"/opt/ohpc/pub/cuda/11.2.2/bin\")\nprepend_path(\"INCLUDE\",\"/opt/ohpc/pub/cuda/11.2.2/include\")\nprepend_path(\"LD_LIBRARY_PATH\",\"/opt/ohpc/pub/cuda/11.2.2/lib64\")\nfamily(\"cuda\")\nhelp([[ \nThis module loads the CUDA\n\nVersion 11.2.2\n\n]])\n```\n:::\n\n\n\n\n\n\n### 1.3 Module load {.unnumbered}\n\n특정 모듈을 불러와 사용할 수 있는 명령어입니다. 여러 모듈을 동시에 불러올 수도 있습니다.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(ubai) [ssu@gate1 ~]$ module load cuda/11.2.2\n```\n:::\n\n\n\n\n\n\n### 1.4 Module list {.unnumbered}\n\n현재 사용 중인 모듈의 목록을 확인할 수 있는 명령어입니다.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(ubai) [ssu@gate1 ~]$ module list\n\nCurrently Loaded Modules:\n  1) cuda/11.2.2   2) dal/latest\n```\n:::\n\n\n\n\n\n\n### 1.5 Module rm {.unnumbered}\n\n사용 목록에서 특정 모듈을 제거할 때 사용하는 명령어입니다.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(ubai) [ssu@gate1 ~]$ module rm dal/latest\n\nRemoving dal version 2023.1.0\nUse `module list` to view any remaining dependent modules.\n```\n:::\n\n\n\n\n\n\n### 1.6 Module purge {.unnumbered}\n\n`module rm`와 달리 전체 사용 목록을 초기화하기 위해 사용하는 명령어입니다. `module purge`실행 후 `module list`에 아무런 module이 출력되지 않는 것을 확인할 수 있습니다.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(ubai) [ssu@gate1 ~]$ module purge\n\n(ubai) [ssu@gate1 ~]$ module list\nNo modules loaded\n```\n:::\n\n\n\n\n\n\n\n## 2. Python 환경 설정 {.unnumbered}\n\n**💡 Python**\n\n    Python은 웹 어플리케이션, 소프트웨어 개발, 데이터 사이언스, \n    머신러닝, 딥러닝에 널리 사용되는 프로그래밍 언어입니다. \n    오픈소스 환경을 가지고 있으며, 많은 사람들이 이용하는 언어입니다.\n\n파이썬을 활용하기 위해서는 보통 Anaconda를 활용하지만 리눅스 컴퓨팅 환경에서는 Miniconda를 활용합니다. UBAI 슈퍼컴퓨터에서도 파이썬을 이용하기 위해서는 Miniconda를 사용해야 합니다.\n\n**💡 Miniconda**\n\n    Anaconda는 머신러닝이나 데이터 분석 등에 사용하는 \n    여러가지 패키지가 기본적으로 포함되어있는 파이썬 배포판입니다. \n    파이썬의 가상환경을 구축하는데 매우 유용하게 사용됩니다. \n\n    Miniconda는 Anaconda의 경량버전이라고 볼 수 있습니다.\n\n### 2.1 Minicoda 설치 {.unnumbered}\n\nMiniconda 설치를 진행하기 위해서는 Miniconda의 다운로드 사이트 링크를 이용한 다운로드 방법을 채택합니다.\n\n1.  메뉴에서 새 terminal을 생성하시고 terminal 칸에 아래의 명령어를 입력합니다. 이는 Miniconda 다운로드 파일 인터넷으로부터 다운로드하는 과정입니다.\n\n    `wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh`\n\n\n2. wget으로 받은 파일을 이용해 bash 명령어를 통해서 설치를 진행합니다. \n    \n    `bash Miniconda3-latest-Linux-x86_64.sh`\n    \n\n3. 실행하면 Miniconda 사용에 따른 안내문과 같은 내용이 뜨기 때문에 내용이 꽤 깁니다. 라이센스 동의에 대한 내용이 모두 나타날 때까지 Enter를 꾹 눌러줍니다. 그 후 라이센스 동의 확인에 대한 질문에 ‘yes’ 라고 입력해줍니다. Enter를 너무 오래 눌러 동의 화면이 바로 넘어가지 않게 주의하세요.\n\n4. 화면에서 해당 경로가 자신의 서버에 있는 경로와 맞는지 확인 후 Enter를 눌러줍니다.\n\n5. 처음 접속 시, conda init 진행 선택에 대한 질문이 뜹니다. ‘yes’를 입력하신 후 enter를 눌러주시면 됩니다. \n\n6. 변경사항 반영을 위해 지금 작업한 창을 닫고 새로 접속하세요.\n\n7. 재접속 시, terminal에 `(base)[사용자ID@사용자_gate_number]`가 보인다면 성공적으로 설치가 완료된 것입니다. 설치 후 왼쪽의 탐색기(Explorer) 목록에 miniconda 폴더가 있는지 꼭 확인해주세요.\n\n\n### 2.2 Minicoda 실행 {.unnumbered}\n\nMiniconda 설치 후, Python 가상 환경을 생성하여 실행합니다.\n\n가상환경을 생성하여 사용하면 Python 패키지의 호환성 문제(Package Dependencies)를 해결하기 좋습니다. 여러 프로젝트나 공모전을 진행함에 있어 각 작업에 필요한 Python 패키지를 환경 별로 설치하여 따로 관리하기에 용이합니다.\n\n1. 가상 환경 생성을 위해 아래의 명령어를 terminal에 입력합니다.\n\n`conda create -n {가상환경_이름} python={설치할_Python_버전}`\n\nex. `conda create -n ubai python=3.11`\n\n2. 생성한 가상환경에 진입합니다.\n\n`conda activate {가상환경_이름}`\n\nex. `conda activate ubai`\n\n![](./jpg/conda.jpg)\n\n\n**📌 참고 사항**\n\n해당 가상 환경에서 Jupyter notebook의 사용을 희망할 시, 아래의 명령어를 입력하세요.<br>\n`pip install ipykernel jupyerlab` or `conda install ipykernel jupyterlab`\n\n<div style=\"font-size: 13px;\">※ *Python 환경에서는 패키지 설치를 위해 `pip install` 명령어를 이용합니다.*</div>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}